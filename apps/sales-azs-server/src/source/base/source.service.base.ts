/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Source as PrismaSource,
  DataRecord as PrismaDataRecord,
} from "@prisma/client";

export class SourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SourceCountArgs, "select">): Promise<number> {
    return this.prisma.source.count(args);
  }

  async sources(args: Prisma.SourceFindManyArgs): Promise<PrismaSource[]> {
    return this.prisma.source.findMany(args);
  }
  async source(
    args: Prisma.SourceFindUniqueArgs
  ): Promise<PrismaSource | null> {
    return this.prisma.source.findUnique(args);
  }
  async createSource(args: Prisma.SourceCreateArgs): Promise<PrismaSource> {
    return this.prisma.source.create(args);
  }
  async updateSource(args: Prisma.SourceUpdateArgs): Promise<PrismaSource> {
    return this.prisma.source.update(args);
  }
  async deleteSource(args: Prisma.SourceDeleteArgs): Promise<PrismaSource> {
    return this.prisma.source.delete(args);
  }

  async findDataRecords(
    parentId: string,
    args: Prisma.DataRecordFindManyArgs
  ): Promise<PrismaDataRecord[]> {
    return this.prisma.source
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dataRecords(args);
  }
}
